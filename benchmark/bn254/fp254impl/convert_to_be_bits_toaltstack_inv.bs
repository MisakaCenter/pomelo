PUSH_BIGINT_0 254 29 limbs0
OP_PUSHNUM_8 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_0 { (altstack[0] == limbs0[8].(0)) }
ASSUME_1 { (altstack[1] == limbs0[8].(1)) }
ASSUME_2 { (altstack[2] == limbs0[8].(2)) }
ASSUME_3 { (altstack[3] == limbs0[8].(3)) }
ASSUME_4 { (altstack[4] == limbs0[8].(4)) }
ASSUME_5 { (altstack[5] == limbs0[8].(5)) }
ASSUME_6 { (altstack[6] == limbs0[8].(6)) }
ASSUME_7 { (altstack[7] == limbs0[8].(7)) }
ASSUME_8 { (altstack[8] == limbs0[8].(8)) }
ASSUME_9 { (altstack[9] == limbs0[8].(9)) }
ASSUME_10 { (altstack[10] == limbs0[8].(10)) }
ASSUME_11 { (altstack[11] == limbs0[8].(11)) }
ASSUME_12 { (altstack[12] == limbs0[8].(12)) }
ASSUME_13 { (altstack[13] == limbs0[8].(13)) }
ASSUME_14 { (altstack[14] == limbs0[8].(14)) }
ASSUME_15 { (altstack[15] == limbs0[8].(15)) }
ASSUME_16 { (altstack[16] == limbs0[8].(16)) }
ASSUME_17 { (altstack[17] == limbs0[8].(17)) }
ASSUME_18 { (altstack[18] == limbs0[8].(18)) }
ASSUME_19 { (altstack[19] == limbs0[8].(19)) }
ASSUME_20 { (altstack[20] == limbs0[8].(20)) }
ASSUME_21 { (altstack[21] == limbs0[8].(21)) }
OP_PUSHNUM_7 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_22 { (altstack[0] == limbs0[7].(0)) }
ASSUME_23 { (altstack[1] == limbs0[7].(1)) }
ASSUME_24 { (altstack[2] == limbs0[7].(2)) }
ASSUME_25 { (altstack[3] == limbs0[7].(3)) }
ASSUME_26 { (altstack[4] == limbs0[7].(4)) }
ASSUME_27 { (altstack[5] == limbs0[7].(5)) }
ASSUME_28 { (altstack[6] == limbs0[7].(6)) }
ASSUME_29 { (altstack[7] == limbs0[7].(7)) }
ASSUME_30 { (altstack[8] == limbs0[7].(8)) }
ASSUME_31 { (altstack[9] == limbs0[7].(9)) }
ASSUME_32 { (altstack[10] == limbs0[7].(10)) }
ASSUME_33 { (altstack[11] == limbs0[7].(11)) }
ASSUME_34 { (altstack[12] == limbs0[7].(12)) }
ASSUME_35 { (altstack[13] == limbs0[7].(13)) }
ASSUME_36 { (altstack[14] == limbs0[7].(14)) }
ASSUME_37 { (altstack[15] == limbs0[7].(15)) }
ASSUME_38 { (altstack[16] == limbs0[7].(16)) }
ASSUME_39 { (altstack[17] == limbs0[7].(17)) }
ASSUME_40 { (altstack[18] == limbs0[7].(18)) }
ASSUME_41 { (altstack[19] == limbs0[7].(19)) }
ASSUME_42 { (altstack[20] == limbs0[7].(20)) }
ASSUME_43 { (altstack[21] == limbs0[7].(21)) }
ASSUME_44 { (altstack[22] == limbs0[7].(22)) }
ASSUME_45 { (altstack[23] == limbs0[7].(23)) }
ASSUME_46 { (altstack[24] == limbs0[7].(24)) }
ASSUME_47 { (altstack[25] == limbs0[7].(25)) }
ASSUME_48 { (altstack[26] == limbs0[7].(26)) }
ASSUME_49 { (altstack[27] == limbs0[7].(27)) }
ASSUME_50 { (altstack[28] == limbs0[7].(28)) }
OP_PUSHNUM_6 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_51 { (altstack[0] == limbs0[6].(0)) }
ASSUME_52 { (altstack[1] == limbs0[6].(1)) }
ASSUME_53 { (altstack[2] == limbs0[6].(2)) }
ASSUME_54 { (altstack[3] == limbs0[6].(3)) }
ASSUME_55 { (altstack[4] == limbs0[6].(4)) }
ASSUME_56 { (altstack[5] == limbs0[6].(5)) }
ASSUME_57 { (altstack[6] == limbs0[6].(6)) }
ASSUME_58 { (altstack[7] == limbs0[6].(7)) }
ASSUME_59 { (altstack[8] == limbs0[6].(8)) }
ASSUME_60 { (altstack[9] == limbs0[6].(9)) }
ASSUME_61 { (altstack[10] == limbs0[6].(10)) }
ASSUME_62 { (altstack[11] == limbs0[6].(11)) }
ASSUME_63 { (altstack[12] == limbs0[6].(12)) }
ASSUME_64 { (altstack[13] == limbs0[6].(13)) }
ASSUME_65 { (altstack[14] == limbs0[6].(14)) }
ASSUME_66 { (altstack[15] == limbs0[6].(15)) }
ASSUME_67 { (altstack[16] == limbs0[6].(16)) }
ASSUME_68 { (altstack[17] == limbs0[6].(17)) }
ASSUME_69 { (altstack[18] == limbs0[6].(18)) }
ASSUME_70 { (altstack[19] == limbs0[6].(19)) }
ASSUME_71 { (altstack[20] == limbs0[6].(20)) }
ASSUME_72 { (altstack[21] == limbs0[6].(21)) }
ASSUME_73 { (altstack[22] == limbs0[6].(22)) }
ASSUME_74 { (altstack[23] == limbs0[6].(23)) }
ASSUME_75 { (altstack[24] == limbs0[6].(24)) }
ASSUME_76 { (altstack[25] == limbs0[6].(25)) }
ASSUME_77 { (altstack[26] == limbs0[6].(26)) }
ASSUME_78 { (altstack[27] == limbs0[6].(27)) }
ASSUME_79 { (altstack[28] == limbs0[6].(28)) }
OP_PUSHNUM_5 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_80 { (altstack[0] == limbs0[5].(0)) }
ASSUME_81 { (altstack[1] == limbs0[5].(1)) }
ASSUME_82 { (altstack[2] == limbs0[5].(2)) }
ASSUME_83 { (altstack[3] == limbs0[5].(3)) }
ASSUME_84 { (altstack[4] == limbs0[5].(4)) }
ASSUME_85 { (altstack[5] == limbs0[5].(5)) }
ASSUME_86 { (altstack[6] == limbs0[5].(6)) }
ASSUME_87 { (altstack[7] == limbs0[5].(7)) }
ASSUME_88 { (altstack[8] == limbs0[5].(8)) }
ASSUME_89 { (altstack[9] == limbs0[5].(9)) }
ASSUME_90 { (altstack[10] == limbs0[5].(10)) }
ASSUME_91 { (altstack[11] == limbs0[5].(11)) }
ASSUME_92 { (altstack[12] == limbs0[5].(12)) }
ASSUME_93 { (altstack[13] == limbs0[5].(13)) }
ASSUME_94 { (altstack[14] == limbs0[5].(14)) }
ASSUME_95 { (altstack[15] == limbs0[5].(15)) }
ASSUME_96 { (altstack[16] == limbs0[5].(16)) }
ASSUME_97 { (altstack[17] == limbs0[5].(17)) }
ASSUME_98 { (altstack[18] == limbs0[5].(18)) }
ASSUME_99 { (altstack[19] == limbs0[5].(19)) }
ASSUME_100 { (altstack[20] == limbs0[5].(20)) }
ASSUME_101 { (altstack[21] == limbs0[5].(21)) }
ASSUME_102 { (altstack[22] == limbs0[5].(22)) }
ASSUME_103 { (altstack[23] == limbs0[5].(23)) }
ASSUME_104 { (altstack[24] == limbs0[5].(24)) }
ASSUME_105 { (altstack[25] == limbs0[5].(25)) }
ASSUME_106 { (altstack[26] == limbs0[5].(26)) }
ASSUME_107 { (altstack[27] == limbs0[5].(27)) }
ASSUME_108 { (altstack[28] == limbs0[5].(28)) }
OP_PUSHNUM_4 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_109 { (altstack[0] == limbs0[4].(0)) }
ASSUME_110 { (altstack[1] == limbs0[4].(1)) }
ASSUME_111 { (altstack[2] == limbs0[4].(2)) }
ASSUME_112 { (altstack[3] == limbs0[4].(3)) }
ASSUME_113 { (altstack[4] == limbs0[4].(4)) }
ASSUME_114 { (altstack[5] == limbs0[4].(5)) }
ASSUME_115 { (altstack[6] == limbs0[4].(6)) }
ASSUME_116 { (altstack[7] == limbs0[4].(7)) }
ASSUME_117 { (altstack[8] == limbs0[4].(8)) }
ASSUME_118 { (altstack[9] == limbs0[4].(9)) }
ASSUME_119 { (altstack[10] == limbs0[4].(10)) }
ASSUME_120 { (altstack[11] == limbs0[4].(11)) }
ASSUME_121 { (altstack[12] == limbs0[4].(12)) }
ASSUME_122 { (altstack[13] == limbs0[4].(13)) }
ASSUME_123 { (altstack[14] == limbs0[4].(14)) }
ASSUME_124 { (altstack[15] == limbs0[4].(15)) }
ASSUME_125 { (altstack[16] == limbs0[4].(16)) }
ASSUME_126 { (altstack[17] == limbs0[4].(17)) }
ASSUME_127 { (altstack[18] == limbs0[4].(18)) }
ASSUME_128 { (altstack[19] == limbs0[4].(19)) }
ASSUME_129 { (altstack[20] == limbs0[4].(20)) }
ASSUME_130 { (altstack[21] == limbs0[4].(21)) }
ASSUME_131 { (altstack[22] == limbs0[4].(22)) }
ASSUME_132 { (altstack[23] == limbs0[4].(23)) }
ASSUME_133 { (altstack[24] == limbs0[4].(24)) }
ASSUME_134 { (altstack[25] == limbs0[4].(25)) }
ASSUME_135 { (altstack[26] == limbs0[4].(26)) }
ASSUME_136 { (altstack[27] == limbs0[4].(27)) }
ASSUME_137 { (altstack[28] == limbs0[4].(28)) }
OP_PUSHNUM_3 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_138 { (altstack[0] == limbs0[3].(0)) }
ASSUME_139 { (altstack[1] == limbs0[3].(1)) }
ASSUME_140 { (altstack[2] == limbs0[3].(2)) }
ASSUME_141 { (altstack[3] == limbs0[3].(3)) }
ASSUME_142 { (altstack[4] == limbs0[3].(4)) }
ASSUME_143 { (altstack[5] == limbs0[3].(5)) }
ASSUME_144 { (altstack[6] == limbs0[3].(6)) }
ASSUME_145 { (altstack[7] == limbs0[3].(7)) }
ASSUME_146 { (altstack[8] == limbs0[3].(8)) }
ASSUME_147 { (altstack[9] == limbs0[3].(9)) }
ASSUME_148 { (altstack[10] == limbs0[3].(10)) }
ASSUME_149 { (altstack[11] == limbs0[3].(11)) }
ASSUME_150 { (altstack[12] == limbs0[3].(12)) }
ASSUME_151 { (altstack[13] == limbs0[3].(13)) }
ASSUME_152 { (altstack[14] == limbs0[3].(14)) }
ASSUME_153 { (altstack[15] == limbs0[3].(15)) }
ASSUME_154 { (altstack[16] == limbs0[3].(16)) }
ASSUME_155 { (altstack[17] == limbs0[3].(17)) }
ASSUME_156 { (altstack[18] == limbs0[3].(18)) }
ASSUME_157 { (altstack[19] == limbs0[3].(19)) }
ASSUME_158 { (altstack[20] == limbs0[3].(20)) }
ASSUME_159 { (altstack[21] == limbs0[3].(21)) }
ASSUME_160 { (altstack[22] == limbs0[3].(22)) }
ASSUME_161 { (altstack[23] == limbs0[3].(23)) }
ASSUME_162 { (altstack[24] == limbs0[3].(24)) }
ASSUME_163 { (altstack[25] == limbs0[3].(25)) }
ASSUME_164 { (altstack[26] == limbs0[3].(26)) }
ASSUME_165 { (altstack[27] == limbs0[3].(27)) }
ASSUME_166 { (altstack[28] == limbs0[3].(28)) }
OP_PUSHNUM_2 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_167 { (altstack[0] == limbs0[2].(0)) }
ASSUME_168 { (altstack[1] == limbs0[2].(1)) }
ASSUME_169 { (altstack[2] == limbs0[2].(2)) }
ASSUME_170 { (altstack[3] == limbs0[2].(3)) }
ASSUME_171 { (altstack[4] == limbs0[2].(4)) }
ASSUME_172 { (altstack[5] == limbs0[2].(5)) }
ASSUME_173 { (altstack[6] == limbs0[2].(6)) }
ASSUME_174 { (altstack[7] == limbs0[2].(7)) }
ASSUME_175 { (altstack[8] == limbs0[2].(8)) }
ASSUME_176 { (altstack[9] == limbs0[2].(9)) }
ASSUME_177 { (altstack[10] == limbs0[2].(10)) }
ASSUME_178 { (altstack[11] == limbs0[2].(11)) }
ASSUME_179 { (altstack[12] == limbs0[2].(12)) }
ASSUME_180 { (altstack[13] == limbs0[2].(13)) }
ASSUME_181 { (altstack[14] == limbs0[2].(14)) }
ASSUME_182 { (altstack[15] == limbs0[2].(15)) }
ASSUME_183 { (altstack[16] == limbs0[2].(16)) }
ASSUME_184 { (altstack[17] == limbs0[2].(17)) }
ASSUME_185 { (altstack[18] == limbs0[2].(18)) }
ASSUME_186 { (altstack[19] == limbs0[2].(19)) }
ASSUME_187 { (altstack[20] == limbs0[2].(20)) }
ASSUME_188 { (altstack[21] == limbs0[2].(21)) }
ASSUME_189 { (altstack[22] == limbs0[2].(22)) }
ASSUME_190 { (altstack[23] == limbs0[2].(23)) }
ASSUME_191 { (altstack[24] == limbs0[2].(24)) }
ASSUME_192 { (altstack[25] == limbs0[2].(25)) }
ASSUME_193 { (altstack[26] == limbs0[2].(26)) }
ASSUME_194 { (altstack[27] == limbs0[2].(27)) }
ASSUME_195 { (altstack[28] == limbs0[2].(28)) }
OP_PUSHNUM_1 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_196 { (altstack[0] == limbs0[1].(0)) }
ASSUME_197 { (altstack[1] == limbs0[1].(1)) }
ASSUME_198 { (altstack[2] == limbs0[1].(2)) }
ASSUME_199 { (altstack[3] == limbs0[1].(3)) }
ASSUME_200 { (altstack[4] == limbs0[1].(4)) }
ASSUME_201 { (altstack[5] == limbs0[1].(5)) }
ASSUME_202 { (altstack[6] == limbs0[1].(6)) }
ASSUME_203 { (altstack[7] == limbs0[1].(7)) }
ASSUME_204 { (altstack[8] == limbs0[1].(8)) }
ASSUME_205 { (altstack[9] == limbs0[1].(9)) }
ASSUME_206 { (altstack[10] == limbs0[1].(10)) }
ASSUME_207 { (altstack[11] == limbs0[1].(11)) }
ASSUME_208 { (altstack[12] == limbs0[1].(12)) }
ASSUME_209 { (altstack[13] == limbs0[1].(13)) }
ASSUME_210 { (altstack[14] == limbs0[1].(14)) }
ASSUME_211 { (altstack[15] == limbs0[1].(15)) }
ASSUME_212 { (altstack[16] == limbs0[1].(16)) }
ASSUME_213 { (altstack[17] == limbs0[1].(17)) }
ASSUME_214 { (altstack[18] == limbs0[1].(18)) }
ASSUME_215 { (altstack[19] == limbs0[1].(19)) }
ASSUME_216 { (altstack[20] == limbs0[1].(20)) }
ASSUME_217 { (altstack[21] == limbs0[1].(21)) }
ASSUME_218 { (altstack[22] == limbs0[1].(22)) }
ASSUME_219 { (altstack[23] == limbs0[1].(23)) }
ASSUME_220 { (altstack[24] == limbs0[1].(24)) }
ASSUME_221 { (altstack[25] == limbs0[1].(25)) }
ASSUME_222 { (altstack[26] == limbs0[1].(26)) }
ASSUME_223 { (altstack[27] == limbs0[1].(27)) }
ASSUME_224 { (altstack[28] == limbs0[1].(28)) }
OP_0 OP_ROLL
OP_TOALTSTACK
OP_PUSHNUM_2
OP_PUSHNUM_4
OP_PUSHNUM_8
OP_PUSHNUM_16
OP_PUSHBYTES_1 20
OP_PUSHBYTES_1 40
OP_PUSHBYTES_2 8000
OP_PUSHBYTES_2 0001
OP_PUSHBYTES_2 0002
OP_PUSHBYTES_2 0004
OP_PUSHBYTES_2 0008
OP_PUSHBYTES_2 0010
OP_PUSHBYTES_2 0020
OP_PUSHBYTES_2 0040
OP_PUSHBYTES_3 008000
OP_PUSHBYTES_3 000001
OP_PUSHBYTES_3 000002
OP_PUSHBYTES_3 000004
OP_PUSHBYTES_3 000008
OP_PUSHBYTES_3 000010
OP_PUSHBYTES_3 000020
OP_PUSHBYTES_3 000040
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_DUP OP_DUP OP_ADD
OP_FROMALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF OP_TOALTSTACK
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_1 OP_ELSE OP_NIP OP_0 OP_ENDIF
OP_TOALTSTACK OP_TOALTSTACK
ASSUME_225 { (altstack[0] == limbs0[0].(0)) }
ASSUME_226 { (altstack[1] == limbs0[0].(1)) }
ASSUME_227 { (altstack[2] == limbs0[0].(2)) }
ASSUME_228 { (altstack[3] == limbs0[0].(3)) }
ASSUME_229 { (altstack[4] == limbs0[0].(4)) }
ASSUME_230 { (altstack[5] == limbs0[0].(5)) }
ASSUME_231 { (altstack[6] == limbs0[0].(6)) }
ASSUME_232 { (altstack[7] == limbs0[0].(7)) }
ASSUME_233 { (altstack[8] == limbs0[0].(8)) }
ASSUME_234 { (altstack[9] == limbs0[0].(9)) }
ASSUME_235 { (altstack[10] == limbs0[0].(10)) }
ASSUME_236 { (altstack[11] == limbs0[0].(11)) }
ASSUME_237 { (altstack[12] == limbs0[0].(12)) }
ASSUME_238 { (altstack[13] == limbs0[0].(13)) }
ASSUME_239 { (altstack[14] == limbs0[0].(14)) }
ASSUME_240 { (altstack[15] == limbs0[0].(15)) }
ASSUME_241 { (altstack[16] == limbs0[0].(16)) }
ASSUME_242 { (altstack[17] == limbs0[0].(17)) }
ASSUME_243 { (altstack[18] == limbs0[0].(18)) }
ASSUME_244 { (altstack[19] == limbs0[0].(19)) }
ASSUME_245 { (altstack[20] == limbs0[0].(20)) }
ASSUME_246 { (altstack[21] == limbs0[0].(21)) }
ASSUME_247 { (altstack[22] == limbs0[0].(22)) }
ASSUME_248 { (altstack[23] == limbs0[0].(23)) }
ASSUME_249 { (altstack[24] == limbs0[0].(24)) }
ASSUME_250 { (altstack[25] == limbs0[0].(25)) }
ASSUME_251 { (altstack[26] == limbs0[0].(26)) }
ASSUME_252 { (altstack[27] == limbs0[0].(27)) }
ASSUME_253 { (altstack[28] == limbs0[0].(28)) }
ASSERT_0 { (altstack[0] == limbs0[0].(0)) }
ASSERT_1 { (altstack[1] == limbs0[0].(1)) }
ASSERT_2 { (altstack[2] == limbs0[0].(2)) }
ASSERT_3 { (altstack[3] == limbs0[0].(3)) }
ASSERT_4 { (altstack[4] == limbs0[0].(4)) }
ASSERT_5 { (altstack[5] == limbs0[0].(5)) }
ASSERT_6 { (altstack[6] == limbs0[0].(6)) }
ASSERT_7 { (altstack[7] == limbs0[0].(7)) }
ASSERT_8 { (altstack[8] == limbs0[0].(8)) }
ASSERT_9 { (altstack[9] == limbs0[0].(9)) }
ASSERT_10 { (altstack[10] == limbs0[0].(10)) }
ASSERT_11 { (altstack[11] == limbs0[0].(11)) }
ASSERT_12 { (altstack[12] == limbs0[0].(12)) }
ASSERT_13 { (altstack[13] == limbs0[0].(13)) }
ASSERT_14 { (altstack[14] == limbs0[0].(14)) }
ASSERT_15 { (altstack[15] == limbs0[0].(15)) }
ASSERT_16 { (altstack[16] == limbs0[0].(16)) }
ASSERT_17 { (altstack[17] == limbs0[0].(17)) }
ASSERT_18 { (altstack[18] == limbs0[0].(18)) }
ASSERT_19 { (altstack[19] == limbs0[0].(19)) }
ASSERT_20 { (altstack[20] == limbs0[0].(20)) }
ASSERT_21 { (altstack[21] == limbs0[0].(21)) }
ASSERT_22 { (altstack[22] == limbs0[0].(22)) }
ASSERT_23 { (altstack[23] == limbs0[0].(23)) }
ASSERT_24 { (altstack[24] == limbs0[0].(24)) }
ASSERT_25 { (altstack[25] == limbs0[0].(25)) }
ASSERT_26 { (altstack[26] == limbs0[0].(26)) }
ASSERT_27 { (altstack[27] == limbs0[0].(27)) }
ASSERT_28 { (altstack[28] == limbs0[0].(28)) }
ASSERT_29 { (altstack[29] == limbs0[1].(0)) }
ASSERT_30 { (altstack[30] == limbs0[1].(1)) }
ASSERT_31 { (altstack[31] == limbs0[1].(2)) }
ASSERT_32 { (altstack[32] == limbs0[1].(3)) }
ASSERT_33 { (altstack[33] == limbs0[1].(4)) }
ASSERT_34 { (altstack[34] == limbs0[1].(5)) }
ASSERT_35 { (altstack[35] == limbs0[1].(6)) }
ASSERT_36 { (altstack[36] == limbs0[1].(7)) }
ASSERT_37 { (altstack[37] == limbs0[1].(8)) }
ASSERT_38 { (altstack[38] == limbs0[1].(9)) }
ASSERT_39 { (altstack[39] == limbs0[1].(10)) }
ASSERT_40 { (altstack[40] == limbs0[1].(11)) }
ASSERT_41 { (altstack[41] == limbs0[1].(12)) }
ASSERT_42 { (altstack[42] == limbs0[1].(13)) }
ASSERT_43 { (altstack[43] == limbs0[1].(14)) }
ASSERT_44 { (altstack[44] == limbs0[1].(15)) }
ASSERT_45 { (altstack[45] == limbs0[1].(16)) }
ASSERT_46 { (altstack[46] == limbs0[1].(17)) }
ASSERT_47 { (altstack[47] == limbs0[1].(18)) }
ASSERT_48 { (altstack[48] == limbs0[1].(19)) }
ASSERT_49 { (altstack[49] == limbs0[1].(20)) }
ASSERT_50 { (altstack[50] == limbs0[1].(21)) }
ASSERT_51 { (altstack[51] == limbs0[1].(22)) }
ASSERT_52 { (altstack[52] == limbs0[1].(23)) }
ASSERT_53 { (altstack[53] == limbs0[1].(24)) }
ASSERT_54 { (altstack[54] == limbs0[1].(25)) }
ASSERT_55 { (altstack[55] == limbs0[1].(26)) }
ASSERT_56 { (altstack[56] == limbs0[1].(27)) }
ASSERT_57 { (altstack[57] == limbs0[1].(28)) }
ASSERT_58 { (altstack[58] == limbs0[2].(0)) }
ASSERT_59 { (altstack[59] == limbs0[2].(1)) }
ASSERT_60 { (altstack[60] == limbs0[2].(2)) }
ASSERT_61 { (altstack[61] == limbs0[2].(3)) }
ASSERT_62 { (altstack[62] == limbs0[2].(4)) }
ASSERT_63 { (altstack[63] == limbs0[2].(5)) }
ASSERT_64 { (altstack[64] == limbs0[2].(6)) }
ASSERT_65 { (altstack[65] == limbs0[2].(7)) }
ASSERT_66 { (altstack[66] == limbs0[2].(8)) }
ASSERT_67 { (altstack[67] == limbs0[2].(9)) }
ASSERT_68 { (altstack[68] == limbs0[2].(10)) }
ASSERT_69 { (altstack[69] == limbs0[2].(11)) }
ASSERT_70 { (altstack[70] == limbs0[2].(12)) }
ASSERT_71 { (altstack[71] == limbs0[2].(13)) }
ASSERT_72 { (altstack[72] == limbs0[2].(14)) }
ASSERT_73 { (altstack[73] == limbs0[2].(15)) }
ASSERT_74 { (altstack[74] == limbs0[2].(16)) }
ASSERT_75 { (altstack[75] == limbs0[2].(17)) }
ASSERT_76 { (altstack[76] == limbs0[2].(18)) }
ASSERT_77 { (altstack[77] == limbs0[2].(19)) }
ASSERT_78 { (altstack[78] == limbs0[2].(20)) }
ASSERT_79 { (altstack[79] == limbs0[2].(21)) }
ASSERT_80 { (altstack[80] == limbs0[2].(22)) }
ASSERT_81 { (altstack[81] == limbs0[2].(23)) }
ASSERT_82 { (altstack[82] == limbs0[2].(24)) }
ASSERT_83 { (altstack[83] == limbs0[2].(25)) }
ASSERT_84 { (altstack[84] == limbs0[2].(26)) }
ASSERT_85 { (altstack[85] == limbs0[2].(27)) }
ASSERT_86 { (altstack[86] == limbs0[2].(28)) }
ASSERT_87 { (altstack[87] == limbs0[3].(0)) }
ASSERT_88 { (altstack[88] == limbs0[3].(1)) }
ASSERT_89 { (altstack[89] == limbs0[3].(2)) }
ASSERT_90 { (altstack[90] == limbs0[3].(3)) }
ASSERT_91 { (altstack[91] == limbs0[3].(4)) }
ASSERT_92 { (altstack[92] == limbs0[3].(5)) }
ASSERT_93 { (altstack[93] == limbs0[3].(6)) }
ASSERT_94 { (altstack[94] == limbs0[3].(7)) }
ASSERT_95 { (altstack[95] == limbs0[3].(8)) }
ASSERT_96 { (altstack[96] == limbs0[3].(9)) }
ASSERT_97 { (altstack[97] == limbs0[3].(10)) }
ASSERT_98 { (altstack[98] == limbs0[3].(11)) }
ASSERT_99 { (altstack[99] == limbs0[3].(12)) }
ASSERT_100 { (altstack[100] == limbs0[3].(13)) }
ASSERT_101 { (altstack[101] == limbs0[3].(14)) }
ASSERT_102 { (altstack[102] == limbs0[3].(15)) }
ASSERT_103 { (altstack[103] == limbs0[3].(16)) }
ASSERT_104 { (altstack[104] == limbs0[3].(17)) }
ASSERT_105 { (altstack[105] == limbs0[3].(18)) }
ASSERT_106 { (altstack[106] == limbs0[3].(19)) }
ASSERT_107 { (altstack[107] == limbs0[3].(20)) }
ASSERT_108 { (altstack[108] == limbs0[3].(21)) }
ASSERT_109 { (altstack[109] == limbs0[3].(22)) }
ASSERT_110 { (altstack[110] == limbs0[3].(23)) }
ASSERT_111 { (altstack[111] == limbs0[3].(24)) }
ASSERT_112 { (altstack[112] == limbs0[3].(25)) }
ASSERT_113 { (altstack[113] == limbs0[3].(26)) }
ASSERT_114 { (altstack[114] == limbs0[3].(27)) }
ASSERT_115 { (altstack[115] == limbs0[3].(28)) }
ASSERT_116 { (altstack[116] == limbs0[4].(0)) }
ASSERT_117 { (altstack[117] == limbs0[4].(1)) }
ASSERT_118 { (altstack[118] == limbs0[4].(2)) }
ASSERT_119 { (altstack[119] == limbs0[4].(3)) }
ASSERT_120 { (altstack[120] == limbs0[4].(4)) }
ASSERT_121 { (altstack[121] == limbs0[4].(5)) }
ASSERT_122 { (altstack[122] == limbs0[4].(6)) }
ASSERT_123 { (altstack[123] == limbs0[4].(7)) }
ASSERT_124 { (altstack[124] == limbs0[4].(8)) }
ASSERT_125 { (altstack[125] == limbs0[4].(9)) }
ASSERT_126 { (altstack[126] == limbs0[4].(10)) }
ASSERT_127 { (altstack[127] == limbs0[4].(11)) }
ASSERT_128 { (altstack[128] == limbs0[4].(12)) }
ASSERT_129 { (altstack[129] == limbs0[4].(13)) }
ASSERT_130 { (altstack[130] == limbs0[4].(14)) }
ASSERT_131 { (altstack[131] == limbs0[4].(15)) }
ASSERT_132 { (altstack[132] == limbs0[4].(16)) }
ASSERT_133 { (altstack[133] == limbs0[4].(17)) }
ASSERT_134 { (altstack[134] == limbs0[4].(18)) }
ASSERT_135 { (altstack[135] == limbs0[4].(19)) }
ASSERT_136 { (altstack[136] == limbs0[4].(20)) }
ASSERT_137 { (altstack[137] == limbs0[4].(21)) }
ASSERT_138 { (altstack[138] == limbs0[4].(22)) }
ASSERT_139 { (altstack[139] == limbs0[4].(23)) }
ASSERT_140 { (altstack[140] == limbs0[4].(24)) }
ASSERT_141 { (altstack[141] == limbs0[4].(25)) }
ASSERT_142 { (altstack[142] == limbs0[4].(26)) }
ASSERT_143 { (altstack[143] == limbs0[4].(27)) }
ASSERT_144 { (altstack[144] == limbs0[4].(28)) }
ASSERT_145 { (altstack[145] == limbs0[5].(0)) }
ASSERT_146 { (altstack[146] == limbs0[5].(1)) }
ASSERT_147 { (altstack[147] == limbs0[5].(2)) }
ASSERT_148 { (altstack[148] == limbs0[5].(3)) }
ASSERT_149 { (altstack[149] == limbs0[5].(4)) }
ASSERT_150 { (altstack[150] == limbs0[5].(5)) }
ASSERT_151 { (altstack[151] == limbs0[5].(6)) }
ASSERT_152 { (altstack[152] == limbs0[5].(7)) }
ASSERT_153 { (altstack[153] == limbs0[5].(8)) }
ASSERT_154 { (altstack[154] == limbs0[5].(9)) }
ASSERT_155 { (altstack[155] == limbs0[5].(10)) }
ASSERT_156 { (altstack[156] == limbs0[5].(11)) }
ASSERT_157 { (altstack[157] == limbs0[5].(12)) }
ASSERT_158 { (altstack[158] == limbs0[5].(13)) }
ASSERT_159 { (altstack[159] == limbs0[5].(14)) }
ASSERT_160 { (altstack[160] == limbs0[5].(15)) }
ASSERT_161 { (altstack[161] == limbs0[5].(16)) }
ASSERT_162 { (altstack[162] == limbs0[5].(17)) }
ASSERT_163 { (altstack[163] == limbs0[5].(18)) }
ASSERT_164 { (altstack[164] == limbs0[5].(19)) }
ASSERT_165 { (altstack[165] == limbs0[5].(20)) }
ASSERT_166 { (altstack[166] == limbs0[5].(21)) }
ASSERT_167 { (altstack[167] == limbs0[5].(22)) }
ASSERT_168 { (altstack[168] == limbs0[5].(23)) }
ASSERT_169 { (altstack[169] == limbs0[5].(24)) }
ASSERT_170 { (altstack[170] == limbs0[5].(25)) }
ASSERT_171 { (altstack[171] == limbs0[5].(26)) }
ASSERT_172 { (altstack[172] == limbs0[5].(27)) }
ASSERT_173 { (altstack[173] == limbs0[5].(28)) }
ASSERT_174 { (altstack[174] == limbs0[6].(0)) }
ASSERT_175 { (altstack[175] == limbs0[6].(1)) }
ASSERT_176 { (altstack[176] == limbs0[6].(2)) }
ASSERT_177 { (altstack[177] == limbs0[6].(3)) }
ASSERT_178 { (altstack[178] == limbs0[6].(4)) }
ASSERT_179 { (altstack[179] == limbs0[6].(5)) }
ASSERT_180 { (altstack[180] == limbs0[6].(6)) }
ASSERT_181 { (altstack[181] == limbs0[6].(7)) }
ASSERT_182 { (altstack[182] == limbs0[6].(8)) }
ASSERT_183 { (altstack[183] == limbs0[6].(9)) }
ASSERT_184 { (altstack[184] == limbs0[6].(10)) }
ASSERT_185 { (altstack[185] == limbs0[6].(11)) }
ASSERT_186 { (altstack[186] == limbs0[6].(12)) }
ASSERT_187 { (altstack[187] == limbs0[6].(13)) }
ASSERT_188 { (altstack[188] == limbs0[6].(14)) }
ASSERT_189 { (altstack[189] == limbs0[6].(15)) }
ASSERT_190 { (altstack[190] == limbs0[6].(16)) }
ASSERT_191 { (altstack[191] == limbs0[6].(17)) }
ASSERT_192 { (altstack[192] == limbs0[6].(18)) }
ASSERT_193 { (altstack[193] == limbs0[6].(19)) }
ASSERT_194 { (altstack[194] == limbs0[6].(20)) }
ASSERT_195 { (altstack[195] == limbs0[6].(21)) }
ASSERT_196 { (altstack[196] == limbs0[6].(22)) }
ASSERT_197 { (altstack[197] == limbs0[6].(23)) }
ASSERT_198 { (altstack[198] == limbs0[6].(24)) }
ASSERT_199 { (altstack[199] == limbs0[6].(25)) }
ASSERT_200 { (altstack[200] == limbs0[6].(26)) }
ASSERT_201 { (altstack[201] == limbs0[6].(27)) }
ASSERT_202 { (altstack[202] == limbs0[6].(28)) }
ASSERT_203 { (altstack[203] == limbs0[7].(0)) }
ASSERT_204 { (altstack[204] == limbs0[7].(1)) }
ASSERT_205 { (altstack[205] == limbs0[7].(2)) }
ASSERT_206 { (altstack[206] == limbs0[7].(3)) }
ASSERT_207 { (altstack[207] == limbs0[7].(4)) }
ASSERT_208 { (altstack[208] == limbs0[7].(5)) }
ASSERT_209 { (altstack[209] == limbs0[7].(6)) }
ASSERT_210 { (altstack[210] == limbs0[7].(7)) }
ASSERT_211 { (altstack[211] == limbs0[7].(8)) }
ASSERT_212 { (altstack[212] == limbs0[7].(9)) }
ASSERT_213 { (altstack[213] == limbs0[7].(10)) }
ASSERT_214 { (altstack[214] == limbs0[7].(11)) }
ASSERT_215 { (altstack[215] == limbs0[7].(12)) }
ASSERT_216 { (altstack[216] == limbs0[7].(13)) }
ASSERT_217 { (altstack[217] == limbs0[7].(14)) }
ASSERT_218 { (altstack[218] == limbs0[7].(15)) }
ASSERT_219 { (altstack[219] == limbs0[7].(16)) }
ASSERT_220 { (altstack[220] == limbs0[7].(17)) }
ASSERT_221 { (altstack[221] == limbs0[7].(18)) }
ASSERT_222 { (altstack[222] == limbs0[7].(19)) }
ASSERT_223 { (altstack[223] == limbs0[7].(20)) }
ASSERT_224 { (altstack[224] == limbs0[7].(21)) }
ASSERT_225 { (altstack[225] == limbs0[7].(22)) }
ASSERT_226 { (altstack[226] == limbs0[7].(23)) }
ASSERT_227 { (altstack[227] == limbs0[7].(24)) }
ASSERT_228 { (altstack[228] == limbs0[7].(25)) }
ASSERT_229 { (altstack[229] == limbs0[7].(26)) }
ASSERT_230 { (altstack[230] == limbs0[7].(27)) }
ASSERT_231 { (altstack[231] == limbs0[7].(28)) }
ASSERT_232 { (altstack[232] == limbs0[8].(0)) }
ASSERT_233 { (altstack[233] == limbs0[8].(1)) }
ASSERT_234 { (altstack[234] == limbs0[8].(2)) }
ASSERT_235 { (altstack[235] == limbs0[8].(3)) }
ASSERT_236 { (altstack[236] == limbs0[8].(4)) }
ASSERT_237 { (altstack[237] == limbs0[8].(5)) }
ASSERT_238 { (altstack[238] == limbs0[8].(6)) }
ASSERT_239 { (altstack[239] == limbs0[8].(7)) }
ASSERT_240 { (altstack[240] == limbs0[8].(8)) }
ASSERT_241 { (altstack[241] == limbs0[8].(9)) }
ASSERT_242 { (altstack[242] == limbs0[8].(10)) }
ASSERT_243 { (altstack[243] == limbs0[8].(11)) }
ASSERT_244 { (altstack[244] == limbs0[8].(12)) }
ASSERT_245 { (altstack[245] == limbs0[8].(13)) }
ASSERT_246 { (altstack[246] == limbs0[8].(14)) }
ASSERT_247 { (altstack[247] == limbs0[8].(15)) }
ASSERT_248 { (altstack[248] == limbs0[8].(16)) }
ASSERT_249 { (altstack[249] == limbs0[8].(17)) }
ASSERT_250 { (altstack[250] == limbs0[8].(18)) }
ASSERT_251 { (altstack[251] == limbs0[8].(19)) }
ASSERT_252 { (altstack[252] == limbs0[8].(20)) }
ASSERT_253 { (altstack[253] == limbs0[8].(21)) }
