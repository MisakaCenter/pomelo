PUSH_SYMINT_0
ASSUME_0 { ((v0 < 536870912) && (v0 >= 0)) }
OP_PUSHNUM_2 OP_TOALTSTACK
OP_PUSHNUM_4 OP_TOALTSTACK
OP_PUSHNUM_8 OP_TOALTSTACK
OP_PUSHNUM_16 OP_TOALTSTACK
OP_PUSHBYTES_1 20 OP_TOALTSTACK
OP_PUSHBYTES_1 40 OP_TOALTSTACK
OP_PUSHBYTES_2 8000 OP_TOALTSTACK
OP_PUSHBYTES_2 0001 OP_TOALTSTACK
OP_PUSHBYTES_2 0002 OP_TOALTSTACK
OP_PUSHBYTES_2 0004 OP_TOALTSTACK
OP_PUSHBYTES_2 0008 OP_TOALTSTACK
OP_PUSHBYTES_2 0010 OP_TOALTSTACK
OP_PUSHBYTES_2 0020 OP_TOALTSTACK
OP_PUSHBYTES_2 0040 OP_TOALTSTACK
OP_PUSHBYTES_3 008000 OP_TOALTSTACK
OP_PUSHBYTES_3 000001 OP_TOALTSTACK
OP_PUSHBYTES_3 000002 OP_TOALTSTACK
OP_PUSHBYTES_3 000004 OP_TOALTSTACK
OP_PUSHBYTES_3 000008 OP_TOALTSTACK
OP_PUSHBYTES_3 000010 OP_TOALTSTACK
OP_PUSHBYTES_3 000020 OP_TOALTSTACK
OP_PUSHBYTES_3 000040
OP_DUP OP_TOALTSTACK
OP_DUP OP_ADD OP_DUP OP_TOALTSTACK
OP_DUP OP_ADD OP_DUP OP_TOALTSTACK
OP_DUP OP_ADD OP_DUP OP_TOALTSTACK
OP_DUP OP_ADD OP_DUP OP_TOALTSTACK
OP_DUP OP_ADD OP_DUP OP_TOALTSTACK
OP_DUP OP_ADD OP_TOALTSTACK
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_0 { (stack[0] == (v0 % 268435456)) }
ASSUME_1 { (stack[1] == ((v0 >> 28) - ((v0 >> 29) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_2 { (stack[0] == (v0 % 134217728)) }
ASSUME_3 { (stack[1] == ((v0 >> 27) - ((v0 >> 28) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_4 { (stack[0] == (v0 % 67108864)) }
ASSUME_5 { (stack[1] == ((v0 >> 26) - ((v0 >> 27) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_6 { (stack[0] == (v0 % 33554432)) }
ASSUME_7 { (stack[1] == ((v0 >> 25) - ((v0 >> 26) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_8 { (stack[0] == (v0 % 16777216)) }
ASSUME_9 { (stack[1] == ((v0 >> 24) - ((v0 >> 25) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_10 { (stack[0] == (v0 % 8388608)) }
ASSUME_11 { (stack[1] == ((v0 >> 23) - ((v0 >> 24) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_12 { (stack[0] == (v0 % 4194304)) }
ASSUME_13 { (stack[1] == ((v0 >> 22) - ((v0 >> 23) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_14 { (stack[0] == (v0 % 2097152)) }
ASSUME_15 { (stack[1] == ((v0 >> 21) - ((v0 >> 22) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_16 { (stack[0] == (v0 % 1048576)) }
ASSUME_17 { (stack[1] == ((v0 >> 20) - ((v0 >> 21) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_18 { (stack[0] == (v0 % 524288)) }
ASSUME_19 { (stack[1] == ((v0 >> 19) - ((v0 >> 20) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_20 { (stack[0] == (v0 % 262144)) }
ASSUME_21 { (stack[1] == ((v0 >> 18) - ((v0 >> 19) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_22 { (stack[0] == (v0 % 131072)) }
ASSUME_23 { (stack[1] == ((v0 >> 17) - ((v0 >> 18) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_24 { (stack[0] == (v0 % 65536)) }
ASSUME_25 { (stack[1] == ((v0 >> 16) - ((v0 >> 17) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_26 { (stack[0] == (v0 % 32768)) }
ASSUME_27 { (stack[1] == ((v0 >> 15) - ((v0 >> 16) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_28 { (stack[0] == (v0 % 16384)) }
ASSUME_29 { (stack[1] == ((v0 >> 14) - ((v0 >> 15) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_30 { (stack[0] == (v0 % 8192)) }
ASSUME_31 { (stack[1] == ((v0 >> 13) - ((v0 >> 14) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_32 { (stack[0] == (v0 % 4096)) }
ASSUME_33 { (stack[1] == ((v0 >> 12) - ((v0 >> 13) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_34 { (stack[0] == (v0 % 2048)) }
ASSUME_35 { (stack[1] == ((v0 >> 11) - ((v0 >> 12) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_36 { (stack[0] == (v0 % 1024)) }
ASSUME_37 { (stack[1] == ((v0 >> 10) - ((v0 >> 11) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_38 { (stack[0] == (v0 % 512)) }
ASSUME_39 { (stack[1] == ((v0 >> 9) - ((v0 >> 10) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_40 { (stack[0] == (v0 % 256)) }
ASSUME_41 { (stack[1] == ((v0 >> 8) - ((v0 >> 9) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_42 { (stack[0] == (v0 % 128)) }
ASSUME_43 { (stack[1] == ((v0 >> 7) - ((v0 >> 8) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_44 { (stack[0] == (v0 % 64)) }
ASSUME_45 { (stack[1] == ((v0 >> 6) - ((v0 >> 7) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_46 { (stack[0] == (v0 % 32)) }
ASSUME_47 { (stack[1] == ((v0 >> 5) - ((v0 >> 6) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_48 { (stack[0] == (v0 % 16)) }
ASSUME_49 { (stack[1] == ((v0 >> 4) - ((v0 >> 5) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_50 { (stack[0] == (v0 % 8)) }
ASSUME_51 { (stack[1] == ((v0 >> 3) - ((v0 >> 4) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_52 { (stack[0] == (v0 % 4)) }
ASSUME_53 { (stack[1] == ((v0 >> 2) - ((v0 >> 3) << 1))) }
OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_PUSHNUM_1 OP_ELSE OP_DROP OP_0 OP_ENDIF OP_SWAP
ASSUME_54 { (stack[0] == (v0 % 2)) }
ASSUME_55 { (stack[1] == ((v0 >> 1) - ((v0 >> 2) << 1))) }
ASSERT_0 { (stack[0] == ((v0 >> 0) - ((v0 >> 1) << 1))) }
ASSERT_1 { (stack[1] == ((v0 >> 1) - ((v0 >> 2) << 1))) }
ASSERT_2 { (stack[2] == ((v0 >> 2) - ((v0 >> 3) << 1))) }
ASSERT_3 { (stack[3] == ((v0 >> 3) - ((v0 >> 4) << 1))) }
ASSERT_4 { (stack[4] == ((v0 >> 4) - ((v0 >> 5) << 1))) }
ASSERT_5 { (stack[5] == ((v0 >> 5) - ((v0 >> 6) << 1))) }
ASSERT_6 { (stack[6] == ((v0 >> 6) - ((v0 >> 7) << 1))) }
ASSERT_7 { (stack[7] == ((v0 >> 7) - ((v0 >> 8) << 1))) }
ASSERT_8 { (stack[8] == ((v0 >> 8) - ((v0 >> 9) << 1))) }
ASSERT_9 { (stack[9] == ((v0 >> 9) - ((v0 >> 10) << 1))) }
ASSERT_10 { (stack[10] == ((v0 >> 10) - ((v0 >> 11) << 1))) }
ASSERT_11 { (stack[11] == ((v0 >> 11) - ((v0 >> 12) << 1))) }
ASSERT_12 { (stack[12] == ((v0 >> 12) - ((v0 >> 13) << 1))) }
ASSERT_13 { (stack[13] == ((v0 >> 13) - ((v0 >> 14) << 1))) }
ASSERT_14 { (stack[14] == ((v0 >> 14) - ((v0 >> 15) << 1))) }
ASSERT_15 { (stack[15] == ((v0 >> 15) - ((v0 >> 16) << 1))) }
ASSERT_16 { (stack[16] == ((v0 >> 16) - ((v0 >> 17) << 1))) }
ASSERT_17 { (stack[17] == ((v0 >> 17) - ((v0 >> 18) << 1))) }
ASSERT_18 { (stack[18] == ((v0 >> 18) - ((v0 >> 19) << 1))) }
ASSERT_19 { (stack[19] == ((v0 >> 19) - ((v0 >> 20) << 1))) }
ASSERT_20 { (stack[20] == ((v0 >> 20) - ((v0 >> 21) << 1))) }
ASSERT_21 { (stack[21] == ((v0 >> 21) - ((v0 >> 22) << 1))) }
ASSERT_22 { (stack[22] == ((v0 >> 22) - ((v0 >> 23) << 1))) }
ASSERT_23 { (stack[23] == ((v0 >> 23) - ((v0 >> 24) << 1))) }
ASSERT_24 { (stack[24] == ((v0 >> 24) - ((v0 >> 25) << 1))) }
ASSERT_25 { (stack[25] == ((v0 >> 25) - ((v0 >> 26) << 1))) }
ASSERT_26 { (stack[26] == ((v0 >> 26) - ((v0 >> 27) << 1))) }
ASSERT_27 { (stack[27] == ((v0 >> 27) - ((v0 >> 28) << 1))) }
ASSERT_28 { (stack[28] == ((v0 >> 28) - ((v0 >> 29) << 1))) }
