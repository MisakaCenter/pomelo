PUSH_SYMINT_31
PUSH_SYMINT_30
PUSH_SYMINT_29
PUSH_SYMINT_28
PUSH_SYMINT_27
PUSH_SYMINT_26
PUSH_SYMINT_25
PUSH_SYMINT_24
PUSH_SYMINT_23
PUSH_SYMINT_22
PUSH_SYMINT_21
PUSH_SYMINT_20
PUSH_SYMINT_19
PUSH_SYMINT_18
PUSH_SYMINT_17
PUSH_SYMINT_16
PUSH_SYMINT_15
PUSH_SYMINT_14
PUSH_SYMINT_13
PUSH_SYMINT_12
PUSH_SYMINT_11
PUSH_SYMINT_10
PUSH_SYMINT_9
PUSH_SYMINT_8
PUSH_SYMINT_7
PUSH_SYMINT_6
PUSH_SYMINT_5
PUSH_SYMINT_4
PUSH_SYMINT_3
PUSH_SYMINT_2
PUSH_SYMINT_1
PUSH_SYMINT_0
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
OP_PUSHBYTES_1 1f
OP_PICK
ASSERT_0 { (stack[0] == v0) }
ASSERT_1 { (stack[1] == v1) }
ASSERT_2 { (stack[2] == v2) }
ASSERT_3 { (stack[3] == v3) }
ASSERT_4 { (stack[4] == v4) }
ASSERT_5 { (stack[5] == v5) }
ASSERT_6 { (stack[6] == v6) }
ASSERT_7 { (stack[7] == v7) }
ASSERT_8 { (stack[8] == v8) }
ASSERT_9 { (stack[9] == v9) }
ASSERT_10 { (stack[10] == v10) }
ASSERT_11 { (stack[11] == v11) }
ASSERT_12 { (stack[12] == v12) }
ASSERT_13 { (stack[13] == v13) }
ASSERT_14 { (stack[14] == v14) }
ASSERT_15 { (stack[15] == v15) }
ASSERT_16 { (stack[16] == v16) }
ASSERT_17 { (stack[17] == v17) }
ASSERT_18 { (stack[18] == v18) }
ASSERT_19 { (stack[19] == v19) }
ASSERT_20 { (stack[20] == v20) }
ASSERT_21 { (stack[21] == v21) }
ASSERT_22 { (stack[22] == v22) }
ASSERT_23 { (stack[23] == v23) }
ASSERT_24 { (stack[24] == v24) }
ASSERT_25 { (stack[25] == v25) }
ASSERT_26 { (stack[26] == v26) }
ASSERT_27 { (stack[27] == v27) }
ASSERT_28 { (stack[28] == v28) }
ASSERT_29 { (stack[29] == v29) }
ASSERT_30 { (stack[30] == v30) }
ASSERT_31 { (stack[31] == v31) }
ASSERT_32 { (stack[32] == v0) }
ASSERT_33 { (stack[33] == v1) }
ASSERT_34 { (stack[34] == v2) }
ASSERT_35 { (stack[35] == v3) }
ASSERT_36 { (stack[36] == v4) }
ASSERT_37 { (stack[37] == v5) }
ASSERT_38 { (stack[38] == v6) }
ASSERT_39 { (stack[39] == v7) }
ASSERT_40 { (stack[40] == v8) }
ASSERT_41 { (stack[41] == v9) }
ASSERT_42 { (stack[42] == v10) }
ASSERT_43 { (stack[43] == v11) }
ASSERT_44 { (stack[44] == v12) }
ASSERT_45 { (stack[45] == v13) }
ASSERT_46 { (stack[46] == v14) }
ASSERT_47 { (stack[47] == v15) }
ASSERT_48 { (stack[48] == v16) }
ASSERT_49 { (stack[49] == v17) }
ASSERT_50 { (stack[50] == v18) }
ASSERT_51 { (stack[51] == v19) }
ASSERT_52 { (stack[52] == v20) }
ASSERT_53 { (stack[53] == v21) }
ASSERT_54 { (stack[54] == v22) }
ASSERT_55 { (stack[55] == v23) }
ASSERT_56 { (stack[56] == v24) }
ASSERT_57 { (stack[57] == v25) }
ASSERT_58 { (stack[58] == v26) }
ASSERT_59 { (stack[59] == v27) }
ASSERT_60 { (stack[60] == v28) }
ASSERT_61 { (stack[61] == v29) }
ASSERT_62 { (stack[62] == v30) }
ASSERT_63 { (stack[63] == v31) }
