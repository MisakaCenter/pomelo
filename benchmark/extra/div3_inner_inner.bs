PUSH_SYMINT_3
PUSH_SYMINT_2
PUSH_SYMINT_1
PUSH_SYMINT_0
PUSH_SYMINT_4
OP_TOALTSTACK
ASSUME_100 { (v0 < 536870912) }
ASSUME_101 { (v1 < 536870912) }
ASSUME_102 { (v2 < 536870912) }
ASSUME_103 { (v3 < 536870912) }
ASSUME_104 { (v0 >= 0) }
ASSUME_105 { (v1 >= 0) }
ASSUME_106 { (v2 >= 0) }
ASSUME_107 { (v3 >= 0) }
ASSUME_108 { (v1 == (v3 * 3)) }
ASSUME_109 { (v0 < (2 * v1)) }
OP_2DUP OP_LESSTHANOREQUAL OP_IF OP_SWAP OP_SUB OP_PUSHNUM_2 OP_PICK OP_FROMALTSTACK OP_ADD OP_TOALTSTACK OP_ELSE OP_NIP OP_ENDIF
ASSERT_0 { (stack[1] == v2) }
ASSERT_1 { (stack[2] == v3) }
ASSERT_2 { (stack[0] == (if (v1 <= v0) then (v0 - v1) else v0)) }
ASSERT_3 { (altstack[0] == (if (v1 <= v0) then (v4 + v3) else v4)) }
ASSERT_4 { ((v0 + (3 * v4)) == (stack[0] + (altstack[0] * 3))) }
ASSERT_5 { (stack[0] < v1) }
