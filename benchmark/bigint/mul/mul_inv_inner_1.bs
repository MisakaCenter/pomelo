PUSH_BIGINT_1 254 29 limbs1
PUSH_BIGINT_0 254 29 limbs0
PUSH_SYMINT_2
ASSUME_0 { ((v2 == 0) || (v2 == 1)) }
OP_TOALTSTACK
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHNUM_8 OP_ROLL OP_DUP
OP_PUSHNUM_9 OP_ROLL OP_DUP
OP_PUSHNUM_10 OP_ROLL OP_DUP
OP_PUSHNUM_11 OP_ROLL OP_DUP
OP_PUSHNUM_12 OP_ROLL OP_DUP
OP_PUSHNUM_13 OP_ROLL OP_DUP
OP_PUSHNUM_14 OP_ROLL OP_DUP
OP_PUSHNUM_15 OP_ROLL OP_DUP
OP_PUSHNUM_16 OP_ROLL OP_DUP
OP_PUSHBYTES_4 00000020
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_NIP OP_ADD
OP_ADD OP_PUSHBYTES_3 000040 OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL
OP_FROMALTSTACK OP_IF
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_PICK
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_9 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_10 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_11 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_12 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_13 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_14 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_15 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHNUM_16 OP_ROLL
OP_PUSHBYTES_1 11 OP_ROLL OP_PUSHBYTES_1 11 OP_ROLL
OP_PUSHBYTES_4 00000020
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_ROT OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
OP_NIP OP_ADD
OP_ADD OP_PUSHBYTES_3 000040 OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_FROMALTSTACK
OP_ENDIF
ASSERT_1 { (stack[9] == ((limbs1[0] << 1) - (if ((limbs1[0] << 1) >= 536870912) then (((limbs1[0] << 1) >> 29) << 29) else 0))) }
ASSERT_2 { (stack[10] == (((limbs1[1] << 1) + (limbs1[0] >> 28)) - (if (((limbs1[1] << 1) + (limbs1[0] >> 28)) >= 536870912) then ((((limbs1[1] << 1) + (limbs1[0] >> 28)) >> 29) << 29) else 0))) }
ASSERT_3 { (stack[11] == (((limbs1[2] << 1) + (limbs1[1] >> 28)) - (if (((limbs1[2] << 1) + (limbs1[1] >> 28)) >= 536870912) then ((((limbs1[2] << 1) + (limbs1[1] >> 28)) >> 29) << 29) else 0))) }
ASSERT_4 { (stack[12] == (((limbs1[3] << 1) + (limbs1[2] >> 28)) - (if (((limbs1[3] << 1) + (limbs1[2] >> 28)) >= 536870912) then ((((limbs1[3] << 1) + (limbs1[2] >> 28)) >> 29) << 29) else 0))) }
ASSERT_5 { (stack[13] == (((limbs1[4] << 1) + (limbs1[3] >> 28)) - (if (((limbs1[4] << 1) + (limbs1[3] >> 28)) >= 536870912) then ((((limbs1[4] << 1) + (limbs1[3] >> 28)) >> 29) << 29) else 0))) }
ASSERT_6 { (stack[14] == (((limbs1[5] << 1) + (limbs1[4] >> 28)) - (if (((limbs1[5] << 1) + (limbs1[4] >> 28)) >= 536870912) then ((((limbs1[5] << 1) + (limbs1[4] >> 28)) >> 29) << 29) else 0))) }
ASSERT_7 { (stack[15] == (((limbs1[6] << 1) + (limbs1[5] >> 28)) - (if (((limbs1[6] << 1) + (limbs1[5] >> 28)) >= 536870912) then ((((limbs1[6] << 1) + (limbs1[5] >> 28)) >> 29) << 29) else 0))) }
ASSERT_8 { (stack[16] == (((limbs1[7] << 1) + (limbs1[6] >> 28)) - (if (((limbs1[7] << 1) + (limbs1[6] >> 28)) >= 536870912) then ((((limbs1[7] << 1) + (limbs1[6] >> 28)) >> 29) << 29) else 0))) }
ASSERT_9 { (stack[17] == (((limbs1[8] << 1) + (limbs1[7] >> 28)) - (if (((limbs1[8] << 1) + (limbs1[7] >> 28)) >= 4194304) then ((((limbs1[8] << 1) + (limbs1[7] >> 28)) >> 22) << 22) else 0))) }
ASSERT_10 { (stack[0] == ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) % 536870912)) }
ASSERT_11 { (stack[1] == ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) % 536870912)) }
ASSERT_12 { (stack[2] == ((((if (v2 == 1) then stack[11] else 0) + limbs0[2]) + ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) >> 29)) % 536870912)) }
ASSERT_13 { (stack[3] == ((((if (v2 == 1) then stack[12] else 0) + limbs0[3]) + ((((if (v2 == 1) then stack[11] else 0) + limbs0[2]) + ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) >> 29)) >> 29)) % 536870912)) }
ASSERT_14 { (stack[4] == ((((if (v2 == 1) then stack[13] else 0) + limbs0[4]) + ((((if (v2 == 1) then stack[12] else 0) + limbs0[3]) + ((((if (v2 == 1) then stack[11] else 0) + limbs0[2]) + ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) >> 29)) >> 29)) >> 29)) % 536870912)) }
ASSERT_15 { (stack[5] == ((((if (v2 == 1) then stack[14] else 0) + limbs0[5]) + ((((if (v2 == 1) then stack[13] else 0) + limbs0[4]) + ((((if (v2 == 1) then stack[12] else 0) + limbs0[3]) + ((((if (v2 == 1) then stack[11] else 0) + limbs0[2]) + ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) % 536870912)) }
ASSERT_16 { (stack[6] == ((((if (v2 == 1) then stack[15] else 0) + limbs0[6]) + ((((if (v2 == 1) then stack[14] else 0) + limbs0[5]) + ((((if (v2 == 1) then stack[13] else 0) + limbs0[4]) + ((((if (v2 == 1) then stack[12] else 0) + limbs0[3]) + ((((if (v2 == 1) then stack[11] else 0) + limbs0[2]) + ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) % 536870912)) }
ASSERT_17 { (stack[7] == ((((if (v2 == 1) then stack[16] else 0) + limbs0[7]) + ((((if (v2 == 1) then stack[15] else 0) + limbs0[6]) + ((((if (v2 == 1) then stack[14] else 0) + limbs0[5]) + ((((if (v2 == 1) then stack[13] else 0) + limbs0[4]) + ((((if (v2 == 1) then stack[12] else 0) + limbs0[3]) + ((((if (v2 == 1) then stack[11] else 0) + limbs0[2]) + ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) % 536870912)) }
ASSERT_18 { (stack[8] == ((((if (v2 == 1) then stack[17] else 0) + limbs0[8]) + ((((if (v2 == 1) then stack[16] else 0) + limbs0[7]) + ((((if (v2 == 1) then stack[15] else 0) + limbs0[6]) + ((((if (v2 == 1) then stack[14] else 0) + limbs0[5]) + ((((if (v2 == 1) then stack[13] else 0) + limbs0[4]) + ((((if (v2 == 1) then stack[12] else 0) + limbs0[3]) + ((((if (v2 == 1) then stack[11] else 0) + limbs0[2]) + ((((if (v2 == 1) then stack[10] else 0) + limbs0[1]) + ((((if (v2 == 1) then stack[9] else 0) + limbs0[0]) + 0) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) >> 29)) % 4194304)) }
