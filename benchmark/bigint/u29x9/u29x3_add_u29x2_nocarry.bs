PUSH_SYMINT_4
PUSH_SYMINT_3
PUSH_SYMINT_2
PUSH_SYMINT_1
PUSH_SYMINT_0
ASSUME_10 { (v0 < 536870912) }
ASSUME_11 { (v0 >= 0) }
ASSUME_12 { (v1 < 536870912) }
ASSUME_13 { (v1 >= 0) }
ASSUME_14 { (v2 < 536870912) }
ASSUME_15 { (v2 >= 0) }
ASSUME_16 { (v3 < 536870912) }
ASSUME_17 { (v3 >= 0) }
ASSUME_18 { (v4 < 536870912) }
ASSUME_19 { (v4 >= 0) }
OP_ROT OP_TOALTSTACK OP_TOALTSTACK
OP_ROT OP_ADD OP_PUSHBYTES_4 00000020 OP_2DUP OP_GREATERTHANOREQUAL OP_TUCK OP_IF OP_ROT OP_SWAP OP_SUB OP_SWAP OP_ELSE OP_DROP OP_ENDIF OP_ROT OP_ADD
OP_FROMALTSTACK OP_FROMALTSTACK OP_SWAP
OP_ROT OP_ADD OP_PUSHBYTES_4 00000020 OP_2DUP OP_GREATERTHANOREQUAL OP_TUCK OP_IF OP_ROT OP_SWAP OP_SUB OP_SWAP OP_ELSE OP_DROP OP_ENDIF OP_ROT OP_ADD
ASSERT_0 { (stack[0] == ((((v4 + (v3 * 536870912)) + (v2 * 288230376151711744)) + (v1 + (v0 * 536870912))) >> 58)) }
ASSERT_1 { (stack[1] == (((((v4 + (v3 * 536870912)) + (v2 * 288230376151711744)) + (v1 + (v0 * 536870912))) >> 29) % 536870912)) }
ASSERT_2 { (stack[2] == ((((v4 + (v3 * 536870912)) + (v2 * 288230376151711744)) + (v1 + (v0 * 536870912))) % 536870912)) }
